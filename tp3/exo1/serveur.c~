/* SERVEUR. Lancer ce programme en premier (pas d'arguments). */

#include <stdio.h>                  /* fichiers d'en-tÃªte classiques */
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <signal.h>
#include <string.h>
#include <fcntl.h>
#include <errno.h>

#include <sys/socket.h>             /* fichiers d'en-tÃªte "rÃ©seau" */
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#define PORT_SERVEUR 5015           /* NumÃ©ro de port pour le serveur */
#define MAX_CLIENTS   128           /* Nombre maximum de clients */
#define BUFFER_SIZE  1024           /* Taille maximum des messages */

int main(int argc, char *argv[]) {

	int secoute;
	char message[BUFFER_SIZE] = {0};
	struct sockaddr_in cadresse={0};
	sok_len caddrlen = sizeof(cadresse);
	

  /* 1. On dÃ©route les signaux */
	
	signal
  /* 2. On crÃ©e la socket d'Ã©coute. */
	if(secoute = soket(AF_INET, SOCK_STREAM,0) == -1){
	perror("Erreur ouverture des sokets");
	exit(1);}


  /* 3. On prÃ©pare l'adresse du serveur. */

  /* 4. On attache la socket a l'adresse du serveur. */

  /* 5. Enregistrement auprÃ¨s du systÃ¨me. */

  while (1) {
    printf("Serveur en attente de nouveaux clients ou messages.\n");

    /* 6. Si on a reÃ§u une demande sur la socket d'Ã©coute... */

    /* 7. Si on a reÃ§u des donnÃ©es sur une socket de service... */

  }

  /* 8. On termine et libÃ¨re les ressources. */

  return 0;
}

